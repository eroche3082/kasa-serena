FASE 2 â€“ AUTENTICACIÃ“N Y ROLES DE USUARIO
Objetivo:
Fortalecer el sistema de login, proteger rutas sensibles, e implementar roles de usuario (cliente, admin, diseÃ±ador).

âœ… PASO 1 â€“ Definir roles en la base de datos
En shared/schema.ts, agrega el campo role en la tabla users:

ts
Copiar
Editar
role: text('role').default('cliente') // cliente | admin | disenador
Actualiza el type en shared/types.ts:

ts
Copiar
Editar
export type UserRole = 'admin' | 'cliente' | 'disenador';

export interface User {
  id: string;
  username: string;
  email: string;
  role: UserRole;
}
âœ… PASO 2 â€“ Backend: proteger rutas y validar roles
Crear middleware de autenticaciÃ³n y roles
En server/middleware/auth.ts:

ts
Copiar
Editar
import { Request, Response, NextFunction } from 'express';

export function requireAuth(req: Request, res: Response, next: NextFunction) {
  if (!req.session.user) {
    return res.status(401).json({ message: 'Not authenticated' });
  }
  next();
}

export function requireRole(role: 'admin' | 'cliente' | 'disenador') {
  return (req: Request, res: Response, next: NextFunction) => {
    if (!req.session.user || req.session.user.role !== role) {
      return res.status(403).json({ message: 'Access denied' });
    }
    next();
  };
}
Proteger rutas en server/routes.ts:

ts
Copiar
Editar
import { requireAuth, requireRole } from './middleware/auth';

// Solo accesible para diseÃ±adores
app.post('/api/projects', requireAuth, requireRole('disenador'), createProject);

// Acceso a cotizaciones solo para usuarios autenticados
app.get('/api/quotes', requireAuth, getQuotesByUser);
âœ… PASO 3 â€“ Frontend: contexto y protecciÃ³n
Actualizar el contexto de autenticaciÃ³n En client/src/context/AuthContext.tsx, asegÃºrate que user incluya role.

ts
Copiar
Editar
interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  login: (email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
}
ProtecciÃ³n de rutas por rol

Crea un withRoleProtection HOC o usa useAuth directamente en pÃ¡ginas protegidas:

ts
Copiar
Editar
const { user, isAuthenticated } = useAuth();

if (!isAuthenticated || user?.role !== 'disenador') {
  return <Navigate to="/login" />;
}
âœ… PASO 4 â€“ Login/Register con selecciÃ³n de rol
En RegisterForm.tsx, aÃ±ade selector de rol:

tsx
Copiar
Editar
<Select onValueChange={(value) => setUserData({...userData, role: value})}>
  <SelectItem value="cliente">Cliente</SelectItem>
  <SelectItem value="disenador">DiseÃ±ador</SelectItem>
</Select>
Y en el backend de /api/register, guarda ese role en la DB.

âœ… PASO 5 â€“ Seguridad Adicional
Rate Limiting en endpoints IA:

ts
Copiar
Editar
import rateLimit from 'express-rate-limit';

const limiter = rateLimit({
  windowMs: 60 * 1000,
  max: 10,
});

app.use('/api/generate-design', limiter);
CSRF Protection (si usas cookies):

bash
Copiar
Editar
npm install csurf
En tu server/index.ts:

ts
Copiar
Editar
import csrf from 'csurf';

const csrfProtection = csrf({ cookie: true });
app.use(csrfProtection);
ðŸ§ª VerificaciÃ³n Final de Fase 2

Elemento	Estado Esperado
Roles implementados en base de datos	âœ…
Middleware requireRole	âœ…
Rutas protegidas	âœ…
Contexto actualizado en frontend	âœ…
Select de rol en registro	âœ…
ProtecciÃ³n contra ataques