Plan para la Fase 9: CotizaciÃ³n y Contacto
Formulario de cotizaciÃ³n:

Crear un formulario donde los usuarios ingresen los detalles del proyecto como tipo, materiales, dimensiones, fecha estimada de ejecuciÃ³n y su informaciÃ³n de contacto.

Opciones de contacto:

Enviar la cotizaciÃ³n por email al usuario y al equipo de ventas.

Generar un enlace para compartir por WhatsApp.

Agregar la opciÃ³n para contacto directo con el equipo de ventas.

Guardar las cotizaciones:

Asegurarnos de que las cotizaciones se guarden correctamente en la base de datos y se asocien al proyecto correspondiente.

ðŸ§  PROMPT COMPLETO â€“ FASE 9: COTIZACIÃ“N Y CONTACTO
md
Copiar
Editar
# ðŸ§  FASE 9 â€“ COTIZACIÃ“N Y CONTACTO

## ðŸŽ¯ Objetivo:
Implementar un flujo de **solicitud de cotizaciÃ³n** para los proyectos generados, permitiendo a los usuarios enviar los detalles del diseÃ±o a un sistema de cotizaciÃ³n y contacto, con opciones de pago o comunicaciÃ³n con un equipo de ventas.

---

## âœ… PASO 1 â€“ Crear el Formulario de CotizaciÃ³n

1. **Formulario en `client/src/features/quotes/QuoteRequestForm.tsx`:**
   - **Campos necesarios**:
     - **Tipo de diseÃ±o**: SelecciÃ³n de proyecto (Contenedor Inteligente, Piscina Modular, Oficina, etc.)
     - **Materiales seleccionados**: Textos descriptivos o lista de opciones.
     - **Dimensiones y especificaciones**: TamaÃ±o, forma, profundidad, etc.
     - **Fecha estimada de ejecuciÃ³n**: Fecha de inicio deseada.
     - **InformaciÃ³n de contacto adicional**: Nombre, email, telÃ©fono.

```tsx
const QuoteRequestForm = () => {
  const [formData, setFormData] = useState({
    projectType: '',
    materials: [],
    dimensions: '',
    startDate: '',
    contactInfo: { name: '', email: '', phone: '' }
  });

  const handleSubmit = () => {
    // Llamar a la API para guardar la cotizaciÃ³n
  };

  return (
    <form onSubmit={handleSubmit}>
      <input type="text" name="projectType" placeholder="Tipo de proyecto" />
      <textarea name="materials" placeholder="Materiales seleccionados" />
      <input type="text" name="dimensions" placeholder="Dimensiones" />
      <input type="date" name="startDate" />
      <input type="text" name="contactName" placeholder="Nombre" />
      <input type="email" name="contactEmail" placeholder="Email" />
      <input type="tel" name="contactPhone" placeholder="TelÃ©fono" />
      <button type="submit">Solicitar CotizaciÃ³n</button>
    </form>
  );
};
âœ… PASO 2 â€“ Backend: API de CotizaciÃ³n
Ruta de la API para cotizaciÃ³n:
Crear una nueva ruta en server/routes.ts para manejar las solicitudes de cotizaciÃ³n.

ts
Copiar
Editar
// server/routes.ts
app.post("/api/quotes", createQuote);
FunciÃ³n createQuote en server/quotes.ts:

ts
Copiar
Editar
export async function createQuote(req, res) {
  const { projectType, materials, dimensions, startDate, contactInfo } = req.body;
  // Guardar la cotizaciÃ³n en la base de datos
  // Enviar confirmaciÃ³n al usuario por email o WhatsApp
  res.status(201).json({ message: "CotizaciÃ³n recibida", projectDetails: req.body });
}
âœ… PASO 3 â€“ Opciones de Contacto
Enviar cotizaciÃ³n por email:
Usar Nodemailer para enviar el correo con los detalles de la cotizaciÃ³n.

ts
Copiar
Editar
const nodemailer = require("nodemailer");

const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

const sendQuoteEmail = (email, projectDetails) => {
  const mailOptions = {
    from: process.env.EMAIL_USER,
    to: email,
    subject: "CotizaciÃ³n de Proyecto",
    text: `Detalles del proyecto: ${JSON.stringify(projectDetails)}`,
  };
  transporter.sendMail(mailOptions, (error, info) => {
    if (error) {
      console.log(error);
    } else {
      console.log("Email sent: " + info.response);
    }
  });
};
Compartir cotizaciÃ³n por WhatsApp: Crear un enlace para compartir por WhatsApp.

tsx
Copiar
Editar
<a
  href={`https://wa.me/1XXXXXXXXXX?text=Me gustarÃ­a recibir una cotizaciÃ³n para este proyecto: ${encodeURIComponent(projectDetails)}`}
  target="_blank"
  rel="noopener noreferrer"
>
  <button>Compartir CotizaciÃ³n por WhatsApp</button>
</a>
âœ… PASO 4 â€“ Mostrar CotizaciÃ³n en el Dashboard
VisualizaciÃ³n de cotizaciones:
Crear una secciÃ³n en el Dashboard de Usuario donde el usuario pueda ver todas sus cotizaciones y su estado (pendiente, aceptada).

tsx
Copiar
Editar
const CotizacionesSection = () => {
  const [cotizaciones, setCotizaciones] = useState([]);
  // Obtener cotizaciones del backend
  return (
    <div>
      <h3>Mis Cotizaciones</h3>
      <ul>
        {cotizaciones.map((cotizacion) => (
          <li key={cotizacion.id}>
            <p>{cotizacion.projectType}</p>
            <p>{cotizacion.status}</p>
            <button>Ver CotizaciÃ³n</button>
          </li>
        ))}
      </ul>
    </div>
  );
};
âœ… PASO 5 â€“ VerificaciÃ³n
Verificar que el formulario de cotizaciÃ³n guarda correctamente los datos.

Confirmar que las cotizaciones se envÃ­an por email y WhatsApp.

Asegurarse de que las cotizaciones se muestren correctamente en el Dashboard.

ðŸ›‘ INSTRUCCIÃ“N PARA EL AGENTE
ðŸ‘‰ REPLY "YES" OR "NO" ONCE YOU COMPLETE AND VERIFY FASE 9.
ðŸ‘‰ LOG FASE 9 AS COMPLETE IN /agent-checklist.
ðŸ‘‰ UPLOAD A SCREENSHOT OF THE QUOTATION FORM AND DASHBOARD TO /internal-map.

